// –¢–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
export type ProductCategory =
  | 'account'
  | 'balance'
  | 'game'
  | 'skin'
  | 'key'
  | 'service';

// –¢–∏–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
export type OfferType =
  | 'sale'
  | 'rent'
  | 'exchange'
  | 'discount';

// –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
export type ProductStatus =
  | 'active'
  | 'pending'
  | 'sold'
  | 'rejected';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserProduct {
  id: string;
  userId: string;
  title: string;
  description: string;
  price: number;
  discountPrice?: number;
  category: ProductCategory;
  offerType: OfferType;
  images: string[];
  featuredImage: string;
  status: ProductStatus;
  created: string;
  updated: string;

  // –ü–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  level?: number;
  games?: number;
  hours?: number;
  prime?: boolean;
  csgo?: boolean;
  dota2?: boolean;

  // –ü–æ–ª—è –¥–ª—è —Å–∫–∏–Ω–æ–≤
  game?: string;
  rarity?: string;
  wear?: string;

  // –ü–æ–ª—è –¥–ª—è –∫–ª—é—á–µ–π
  platform?: string;
  region?: string;

  // –ü–æ–ª—è –¥–ª—è –∞—Ä–µ–Ω–¥—ã
  rentDuration?: number; // –≤ –¥–Ω—è—Ö
  rentPrice?: number; // —Ü–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  moderationComment?: string;
  moderatedBy?: string;
  moderatedAt?: string;
}

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export type NotificationType = 'success' | 'warning' | 'info' | 'error';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserNotification {
  id: string;
  userId: string;
  message: string;
  type: NotificationType;
  isRead: boolean;
  link?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
  created: string;
  productId?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
export const PRODUCT_CATEGORIES = [
  {
    id: 'account',
    name: '–ê–∫–∫–∞—É–Ω—Ç—ã Steam',
    description: '–ê–∫–∫–∞—É–Ω—Ç—ã —Å –∏–≥—Ä–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏',
    icon: 'üë§'
  },
  {
    id: 'balance',
    name: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    description: '–£—Å–ª—É–≥–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ Steam',
    icon: 'üí∞'
  },
  {
    id: 'game',
    name: '–ò–≥—Ä—ã',
    description: '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ –∏–≥—Ä',
    icon: 'üéÆ'
  },
  {
    id: 'skin',
    name: '–°–∫–∏–Ω—ã',
    description: '–°–∫–∏–Ω—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–≥—Ä',
    icon: 'üé®'
  },
  {
    id: 'key',
    name: '–ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
    description: '–ö–ª—é—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–≥—Ä –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
    icon: 'üîë'
  },
  {
    id: 'service',
    name: '–£—Å–ª—É–≥–∏',
    description: '–†–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
    icon: 'üõ†Ô∏è'
  },
];

// –¢–∏–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
export const OFFER_TYPES = [
  {
    id: 'sale',
    name: '–ü—Ä–æ–¥–∞–∂–∞',
    description: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ',
    icon: 'üíµ'
  },
  {
    id: 'rent',
    name: '–ê—Ä–µ–Ω–¥–∞',
    description: '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–ª–∞—Ç—É',
    icon: '‚è±Ô∏è'
  },
  {
    id: 'exchange',
    name: '–û–±–º–µ–Ω',
    description: '–ì–æ—Ç–æ–≤ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã',
    icon: 'üîÑ'
  },
  {
    id: 'discount',
    name: '–°–æ —Å–∫–∏–¥–∫–æ–π',
    description: '–ü—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π',
    icon: 'üè∑Ô∏è'
  },
];

// –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
const MOCK_USER_PRODUCTS: UserProduct[] = [
  {
    id: '1',
    userId: '1',
    title: '–ê–∫–∫–∞—É–Ω—Ç CS2 —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º',
    description: '–ê–∫–∫–∞—É–Ω—Ç CS2 —Å Prime —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Å–∫–∏–Ω–æ–≤. –ë–æ–ª–µ–µ 1000 —á–∞—Å–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.',
    price: 5000,
    category: 'account',
    offerType: 'sale',
    images: [
      'https://cdn.akamai.steamstatic.com/steam/apps/730/ss_d196d945c6170e9cadaf67a6dea675bd5fa7a046.jpg',
      'https://cdn.akamai.steamstatic.com/steam/apps/730/ss_2b9e362287b509bb3864fa7bad654fe1fda0f7ed.jpg',
    ],
    featuredImage: 'https://cdn.akamai.steamstatic.com/steam/apps/730/ss_d196d945c6170e9cadaf67a6dea675bd5fa7a046.jpg',
    status: 'active',
    created: '2023-09-15T10:30:00Z',
    updated: '2023-09-15T10:30:00Z',
    level: 42,
    games: 25,
    hours: 1200,
    prime: true,
    csgo: true,
  },
  {
    id: '2',
    userId: '1',
    title: '–ù–æ–∂ –ö–µ—Ä–∞–º–±–∏—Ç | –£–±–∏–π—Å—Ç–≤–æ',
    description: '–†–µ–¥–∫–∏–π –Ω–æ–∂ –∏–∑ CS2. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–∑–Ω–æ—Å, —Å–º–æ—Ç—Ä–∏—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ.',
    price: 15000,
    category: 'skin',
    offerType: 'sale',
    images: [
      'https://community.cloudflare.steamstatic.com/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpovbSsLQJf2PLacDBA5ciJlY20k_jkI7fUhFRB4MRij7v--YXygECLpxIuNDztJYKdcVVvMF7U_VG5wOnt0ZfqucifmyYw7nUn-z-DyIoz9NOQ',
    ],
    featuredImage: 'https://community.cloudflare.steamstatic.com/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpovbSsLQJf2PLacDBA5ciJlY20k_jkI7fUhFRB4MRij7v--YXygECLpxIuNDztJYKdcVVvMF7U_VG5wOnt0ZfqucifmyYw7nUn-z-DyIoz9NOQ',
    status: 'active',
    created: '2023-10-20T14:22:00Z',
    updated: '2023-10-20T14:22:00Z',
    game: 'CS2',
    rarity: '–¢–∞–π–Ω–æ–µ',
    wear: '–ù–µ–º–Ω–æ–≥–æ –ø–æ–Ω–æ—à–µ–Ω–Ω–æ–µ',
  },
  {
    id: '3',
    userId: '1',
    title: '–ö–ª—é—á Cyberpunk 2077',
    description: '–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–≥—Ä—ã Cyberpunk 2077 –≤ Steam.',
    price: 2499,
    discountPrice: 1999,
    category: 'key',
    offerType: 'discount',
    images: [
      'https://cdn.akamai.steamstatic.com/steam/apps/1091500/header.jpg',
    ],
    featuredImage: 'https://cdn.akamai.steamstatic.com/steam/apps/1091500/header.jpg',
    status: 'active',
    created: '2023-11-05T09:45:00Z',
    updated: '2023-11-05T09:45:00Z',
    platform: 'Steam',
    region: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π',
  },
  {
    id: '4',
    userId: '1',
    title: '–ê–∫–∫–∞—É–Ω—Ç —Å Red Dead Redemption 2',
    description: '–ê–∫–∫–∞—É–Ω—Ç —Å –∏–≥—Ä–æ–π Red Dead Redemption 2 –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏. –ú–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.',
    price: 4500,
    category: 'account',
    offerType: 'rent',
    images: [
      'https://cdn.akamai.steamstatic.com/steam/apps/1174180/header.jpg',
    ],
    featuredImage: 'https://cdn.akamai.steamstatic.com/steam/apps/1174180/header.jpg',
    status: 'active',
    created: '2023-11-10T16:30:00Z',
    updated: '2023-11-10T16:30:00Z',
    level: 12,
    games: 5,
    hours: 250,
    rentDuration: 30,
    rentPrice: 150, // 150 —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
export const resetAllProductsStatus = (): void => {
  MOCK_USER_PRODUCTS.forEach((product, index) => {
    MOCK_USER_PRODUCTS[index] = {
      ...product,
      status: 'active',
      updated: new Date().toISOString()
    };
  });
};

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ/–¥–µ–º–æ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
export const clearPendingProducts = (): void => {
  const oneDayAgo = new Date();
  oneDayAgo.setDate(oneDayAgo.getDate() - 1);
  const oneDayAgoIso = oneDayAgo.toISOString();

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-ID, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å
  const demoProductIds = ['5', '6', '7', '8']; // ID —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

  for (let i = MOCK_USER_PRODUCTS.length - 1; i >= 0; i--) {
    const product = MOCK_USER_PRODUCTS[i];
    if (product.status === 'pending') {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–º–æ-—Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–Ω —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
      if (demoProductIds.includes(product.id) || product.created < oneDayAgoIso) {
        MOCK_USER_PRODUCTS.splice(i, 1);
      }
    }
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const MOCK_USER_NOTIFICATIONS: UserNotification[] = [
  {
    id: '1',
    userId: '1',
    message: '–í–∞—à —Ç–æ–≤–∞—Ä "–ê–∫–∫–∞—É–Ω—Ç CS2 —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º" –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
    type: 'success',
    isRead: false,
    created: '2023-11-10T10:30:00Z',
    productId: '1',
    link: '/accounts/1'
  },
  {
    id: '2',
    userId: '1',
    message: '–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 1500 ‚ÇΩ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
    type: 'info',
    isRead: true,
    created: '2023-11-08T15:45:00Z',
  },
];

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserProducts = (userId?: string): UserProduct[] => {
  if (userId) {
    return MOCK_USER_PRODUCTS.filter(product => product.userId === userId);
  }
  return MOCK_USER_PRODUCTS;
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
export const getUserProductById = (productId: string): UserProduct | undefined => {
  return MOCK_USER_PRODUCTS.find(product => product.id === productId);
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API)
export const createUserProduct = (product: Omit<UserProduct, 'id' | 'created' | 'updated' | 'status'>): UserProduct => {
  const newProduct: UserProduct = {
    ...product,
    id: `prod-${Date.now()}-${Math.floor(Math.random() * 10000)}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    created: new Date().toISOString(),
    updated: new Date().toISOString(),
    status: 'pending', // –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∂–¥—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  };

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  MOCK_USER_PRODUCTS.push(newProduct);

  console.log('New product created with ID:', newProduct.id, 'Status:', newProduct.status);
  console.log('Total products now:', MOCK_USER_PRODUCTS.length);
  console.log('Pending products:', MOCK_USER_PRODUCTS.filter(p => p.status === 'pending').length);

  return newProduct;
};

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const updateUserProduct = (productId: string, updates: Partial<UserProduct>): UserProduct | undefined => {
  const productIndex = MOCK_USER_PRODUCTS.findIndex(p => p.id === productId);

  if (productIndex === -1) {
    return undefined;
  }

  const updatedProduct = {
    ...MOCK_USER_PRODUCTS[productIndex],
    ...updates,
    updated: new Date().toISOString(),
  };

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  MOCK_USER_PRODUCTS[productIndex] = updatedProduct;

  return updatedProduct;
};

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
export const deleteUserProduct = (productId: string): boolean => {
  const productIndex = MOCK_USER_PRODUCTS.findIndex(p => p.id === productId);

  if (productIndex === -1) {
    return false;
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  MOCK_USER_PRODUCTS.splice(productIndex, 1);

  return true;
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserProductsStats = (userId: string) => {
  const userProducts = getUserProducts(userId);

  return {
    total: userProducts.length,
    active: userProducts.filter(p => p.status === 'active').length,
    pending: userProducts.filter(p => p.status === 'pending').length,
    sold: userProducts.filter(p => p.status === 'sold').length,
    rejected: userProducts.filter(p => p.status === 'rejected').length,
  };
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getProductsByCategory = (category: ProductCategory): UserProduct[] => {
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  return MOCK_USER_PRODUCTS.filter(
    product => product.category === category && product.status === 'active'
  );
};

// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserNotifications = (userId: string): UserNotification[] => {
  return MOCK_USER_NOTIFICATIONS.filter(notification => notification.userId === userId);
};

// –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUnreadNotificationsCount = (userId: string): number => {
  return MOCK_USER_NOTIFICATIONS.filter(
    notification => notification.userId === userId && !notification.isRead
  ).length;
};

// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
export const markNotificationAsRead = (notificationId: string): boolean => {
  const notificationIndex = MOCK_USER_NOTIFICATIONS.findIndex(
    notification => notification.id === notificationId
  );

  if (notificationIndex === -1) {
    return false;
  }

  MOCK_USER_NOTIFICATIONS[notificationIndex] = {
    ...MOCK_USER_NOTIFICATIONS[notificationIndex],
    isRead: true
  };

  return true;
};

// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
export const markAllNotificationsAsRead = (userId: string): boolean => {
  let updated = false;

  MOCK_USER_NOTIFICATIONS.forEach((notification, index) => {
    if (notification.userId === userId && !notification.isRead) {
      MOCK_USER_NOTIFICATIONS[index] = {
        ...notification,
        isRead: true
      };
      updated = true;
    }
  });

  return updated;
};

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export const addNotification = (notification: Omit<UserNotification, 'id' | 'created' | 'isRead'>): UserNotification => {
  const newNotification: UserNotification = {
    ...notification,
    id: `${Date.now()}`,
    created: new Date().toISOString(),
    isRead: false
  };

  MOCK_USER_NOTIFICATIONS.push(newNotification);
  return newNotification;
};

// –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
export const createProductModerationNotification = (
  productId: string,
  action: 'approve' | 'reject',
  comment?: string
): UserNotification | null => {
  const product = getUserProductById(productId);

  if (!product) {
    return null;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  let message = '';
  let type: NotificationType = 'info';
  let link: string | undefined;

  if (action === 'approve') {
    message = `–í–∞—à —Ç–æ–≤–∞—Ä "${product.title}" –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.`;
    type = 'success';

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    switch (product.category) {
      case 'account':
        link = `/accounts/${product.id}`;
        break;
      case 'key':
        link = `/keys/${product.id}`;
        break;
      case 'game':
        link = `/games/${product.id}`;
        break;
      default:
        link = `/products/${product.id}`;
    }
  } else {
    message = `–í–∞—à —Ç–æ–≤–∞—Ä "${product.title}" –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.`;
    type = 'warning';

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (comment) {
      message += ` –ü—Ä–∏—á–∏–Ω–∞: ${comment}`;
    }

    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    link = `/profile/products/edit/${product.id}`;
  }

  // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  return addNotification({
    userId: product.userId,
    message,
    type,
    link,
    productId
  });
};
